# ELF header (52 = 0o64 bytes)
  177 105 114 106   # e_ident[0:4], file type identification "\x7fELF"
  1                 # e_ident[4] = ELFCLASS32, 32-bit code
  1                 # e_ident[5] = ELFDATA2LSB, little-endian machine
  1                 # e_ident[6] = EV_CURRENT, ELF format version
  0 0 0 0 0 0 0 0 0 # e_ident[7:16], padding
  2 0               # e_type = ET_EXEC, executable file
  3 0               # e_machine = EM_386, x86-32
  1 0 0 0           # e_version = EV_CURRENT, ELF format version again
  124 0 1 0         # e_entry = 0o200124 = 0x10054, program entry point
  64 0 0 0          # e_phoff, program header is immediately after ELF header
  0 0 0 0           # e_shoff, no section table
  0 0 0 0           # e_flags, irrelevant
  64 0              # e_ehsize, ELF header size
  40 0              # e_phentsize, size of a program header entry
  1 0               # e_phnum, the number of program header entries
  50 0              # e_shentsize, section header entry size
  0 0               # e_shnum, the number of section entries
  0 0               # e_shstrndx = SHN_UNDEF, no section name table

# Put the binary starting at 0x00010000.
# Linux does not allow putting anything in the first 0x10000 bytes (64 KB)
# to protect against pointer bugs.

# Program header entry (32 = 0o40 bytes)
  1 0 0 0      # p_type = PT_LOAD, a loadable segment
  124 0 0 0    # p_offset = 0o124, contents immediately after this header
  124 0 1 0    # p_vaddr = 0o200124, where to put it in memory
  0 0 0 0      # p_paddr, physical address, irrelevant
  73 0 0 0     # p_filesz, size of the segment in the file; 59 bytes
  73 0 0 0     # p_memsz, size of the segment in memory; 59 bytes
  5 0 0 0      # p_flags = execute (1) + read (4)
  0 20 0 0     # p_align = 4 KB = 0x1000, memory page size

# Actual code

  276 201 0 1 0   # mov esi, hello_str (hello_str is at 0x10081 = 0o200201)

# loop starts here
  212 006         # mov al, [esi]   (load a character from the string)
  042 300         # and al, al      (in order to see if it is 0)
  164 26          # jz exit         (jump to exit if 0; exit is 22=0o26 bytes ahead)
# write 1 byte at esi to stdout
  270 4 0 0 0     # mov eax, 4 (syscall "write")
  273 1 0 0 0     # mov ebx, 1 (standard output)
  213 316         # mov ecx, esi (write buffer at esi)
  272 1 0 0 0     # mov edx, 1 (1 byte)
  315 200         # int 0x80 (system call)
  106             # inc esi
  353 344         # jmp loop (jump by -28 = 0o344 bytes)

# exit(0)
  270 1 0 0 0     # mov eax, 1 (system call "exit")
  273 0 0 0 0     # mov ebx, 0 (return code 0 to the operating system)
  315 200         # int 0x80 (system call)

# the string to write
  110 145 154 154 157 40  # "Hello "
  127 157 162 154 144 41  # "World!"
  12 0                    # new line, end of text marker
