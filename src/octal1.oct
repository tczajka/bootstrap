# ELF header (52 = 0o64 bytes)
  177 105 114 106   # e_ident[0:4], file type identification "\x7fELF"
  1                 # e_ident[4] = ELFCLASS32, 32-bit code
  1                 # e_ident[5] = ELFDATA2LSB, little-endian machine
  1                 # e_ident[6] = EV_CURRENT, ELF format version
  0 0 0 0 0 0 0 0 0 # e_ident[7:16], padding
  2 0               # e_type = ET_EXEC, executable file
  3 0               # e_machine = EM_386, x86-32
  1 0 0 0           # e_version = EV_CURRENT, ELF format version again
  124 0 1 0         # e_entry = 0o200124 = 0x10054, program entry point
  64 0 0 0          # e_phoff, program header is immediately after ELF header
  0 0 0 0           # e_shoff, no section table
  0 0 0 0           # e_flags, irrelevant
  64 0              # e_ehsize, ELF header size
  40 0              # e_phentsize, size of a program header entry
  1 0               # e_phnum, the number of program header entries
  50 0              # e_shentsize, section header entry size
  0 0               # e_shnum, the number of section entries
  0 0               # e_shstrndx = SHN_UNDEF, no section name table

# Put the binary starting at 0x00010000.
# Linux does not allow putting anything in the first 0x10000 bytes (64 KB)
# to protect against pointer bugs.

# Program header entry (32 = 0o40 bytes)
  1 0 0 0      # p_type = PT_LOAD, a loadable segment
  124 0 0 0    # p_offset = 0o124, contents immediately after this header
  124 0 1 0    # p_vaddr = 0o200124, where to put it in memory
  0 0 0 0      # p_paddr, physical address, irrelevant
  222 0 0 0    # p_filesz, size of the segment in the file
  222 0 0 0    # p_memsz, size of the segment in memory
  7 0 0 0      # p_flags = execute (1) + write (2) + read (4)
  0 20 0 0     # p_align = 4 KB = 0x1000, memory page size

# Actual code

# 200124
# start
  350 102 0 0 0   # call read_char

# 200131
# have_next_char:
  040 300         # and al, al
  164 166         # je exit_success (eof)
  074 43          # cmp al, '#' ('#' = 35 = 0o43)
  164 10          # je comment
  054 60          # sub al, '0' ('0' = 48 = 0o60)
  074 10          # cmp al, 8
  162 21          # jc number
# ignore any other character
  353 353         # jmp start

# 200151
# comment; skip until end of line or end of file
  350 55 0 0 0    # call read_char
  074 12          # cmp al, '\n' ('\n' = 10 = 0o12)
  164 342         # je start
  040 300         # and al, al  (end of file?)
  164 135         # je exit_success
  353 361         # jmp comment

# 200170
# number: read an octal number and output a byte
  # we will collect the number in edi
  211 307         # mov edi, eax 
# 200172
# number_loop
  350 34 0 0 0    # call read_char
  054 60          # sub al, '0' ('0' = 48 = 0o60)
  074 10          # cmp al, 8
  163 7           # jnc not_digit
  301 347 3       # shl edi, 3
  001 307         # add edi, eax
  353 356         # jmp number_loop
# 200214
# not_digit
  004 60          # add al, '0'
  211 306         # mov esi, eax
  211 370         # mov eax, edi
  350 42 0 0 0    # call write_char
  211 360         # mov eax, esi
  353 276         # jmp have_next_char

# 200233
# read_char
# eax: character or 0 on EOF
# nothing preserved
  270 3 0 0 0     # mov eax, 3 (syscall "read")
  061 333         # xor ebx, ebx (0, standard input)
  271 345 0 1 0   # mov ecx, buffer
  272 1 0 0 0     # mov edx, 1 (1 byte)
  315 200         # system call
  040 300         # and al, al
  164 6           # je read_char_ret; end of file
  074 1           # cmp al, 1
  165 46          # jne exit_error; 1 byte was not read
  212 001         # mov al, [ecx]  # higher bytes in eax are already 0
# 200270
# read_char_ret
  303             # ret
  
# 200271
# write_char(eax)
# nothing preserved
  271 345 0 1 0   # mov ecx, buffer
  210 001         # mov [ecx], al
  270 4 0 0 0     # mov eax, 4 (syscall "write")
  273 1 0 0 0     # mov ebx, 1 (standard output)
  211 332         # mov edx, ebx (1 byte)
  315 200         # system call
  074 1           # cmp al, 1
  165 12          # jne exit_error, 1 byte was not written
  303             # ret

# 200323
# exit_success
  270 1 0 0 0     # mov eax, 1 (system call "exit")
  061 333         # xor ebx, ebx (0, standard input)
  315 200         # int 0x80 (system call)

# 200334
# exit_error
  270 1 0 0 0     # mov eax, 1 (system call "exit")
  211 303         # mov ebx, eax (return code 1 to the operating system)
  315 200         # int 0x80 (system call)

# 200345
# buffer
  0

# 200346
