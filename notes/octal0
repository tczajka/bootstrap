# ELF header (52 = 0o64 bytes)
  177 105 114 106   # e_ident[0:4], file type identification "\x7fELF"
  1                 # e_ident[4] = ELFCLASS32, 32-bit code
  1                 # e_ident[5] = ELFDATA2LSB, little-endian machine
  1                 # e_ident[6] = EV_CURRENT, ELF format version
  0 0 0 0 0 0 0 0 0 # e_ident[7:16], padding
  2 0               # e_type = ET_EXEC, executable file
  3 0               # e_machine = EM_386, x86-32
  1 0 0 0           # e_version = EV_CURRENT, ELF format version again
  124 0 1 0         # e_entry = 0o200124 = 0x10054, program entry point
  64 0 0 0          # e_phoff, program header is immediately after ELF header
  0 0 0 0           # e_shoff, no section table
  0 0 0 0           # e_flags, irrelevant
  64 0              # e_ehsize, ELF header size
  40 0              # e_phentsize, size of a program header entry
  1 0               # e_phnum, the number of program header entries
  50 0              # e_shentsize, section header entry size
  0 0               # e_shnum, the number of section entries
  0 0               # e_shstrndx = SHN_UNDEF, no section name table

# Put the binary starting at 0x00010000.
# Linux does not allow putting anything in the first 0x10000 bytes (64 KB)
# to protect against pointer bugs.

# Program header entry (32 = 0o40 bytes)
  1 0 0 0      # p_type = PT_LOAD, a loadable segment
  124 0 0 0    # p_offset = 0o124, contents immediately after this header
  124 0 1 0    # p_vaddr = 0o200124, where to put it in memory
  0 0 0 0      # p_paddr, physical address, irrelevant
  xx xx 0 0     # p_filesz, size of the segment in the file; XX bytes
  xx xx 0 0     # p_memsz, size of the segment in memory; XX bytes
  7 0 0 0      # p_flags = execute (1) + write (2) + read (4)
  0 20 0 0     # p_align = 4 KB = 0x1000, memory page size

# Actual code

# start
  350 xx xx xx xx # call read_char; reads next character into esi
  075 377 377 377 377 # cmp eax, -1
  # je exit_success (eof)
  # cmp eax, '#' ('#' = 35 = 0o43)
  # je comment
  # sub eax, '0' ('0' = 48 = 0o60)
  # cmp eax, 8
  # jc number
# ignore any other character
  # jmp start

# comment; skip until end of line or end of file
  # cmp eax, '\n' ('\n' = 10 = 0o12)
  # je start
  # cmp eax, -1  (end of file?)
  # je exit_success
  # call read_char
  # jmp comment

# number: read an octal number and output a byte
  # we will collect the number in edi
  # mov edi, 0
# number_loop
  # sub eax, '0' ('0' = 48 = 0o60)
  # cmp eax, 8
  # jc digit_ok
  # mov eax, edi
  # call write_char
  # jmp start
# digit_ok
  # shl edi, 3
  # add edi, eax
  # call read_char
  # jmp number_loop

# read_char
# eax: character or 0 on EOF
# nothing preserved
  270 3 0 0 0     # mov eax, 3 (syscall "read")
  273 1 0 0 0     # mov ebx, 1 (standard input)
  271 buffer      # mov ecx, buffer
  272 1 0 0 0     # mov edx, 1 (1 byte)
  315 200         # system call
  # cmp eax, 0
  # je read_char_ret; end of file
  # cmp eax, 1
  # jne exit_error; 1 byte was not written
  # TODO: Is ecx preserved in ABI?
  # mov al, [ecx]  # higher bytes in eax are already 0
# read_char_ret
  # ret
  
# write_char(eax)
# nothing preserved
  271 buffer      # mov ecx, buffer
  ??              # mov [ecx], al
  270 4 0 0 0     # mov eax, 4 (syscall "write")
  273 1 0 0 0     # mov ebx, 1 (standard output)
  272 1 0 0 0     # mov edx, 1 (1 byte)
  315 200         # system call
  # cmp eax, 1
  # jne exit_error     # 1 byte was not written
  # ret

# exit_success
  270 1 0 0 0     # mov eax, 1 (system call "exit")
  273 0 0 0 0     # mov ebx, 0 (return code 0 to the operating system)
  315 200         # int 0x80 (system call)

# exit_error
  270 1 0 0 0     # mov eax, 1 (system call "exit")
  273 1 0 0 0     # mov ebx, 1 (return code 1 to the operating system)
  315 200         # int 0x80 (system call)

# buffer
  0
