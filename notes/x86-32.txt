https://software.intel.com/sites/default/files/managed/a4/60/325383-sdm-vol-2abcd.pdf

== Instruction format ==

<prefixes> <opcode> <ModR/M> <SIB> <displacement> <immediate>

== Register names ==

0: eax or al
1: ecx or cl
2: edx or dl
3: ebx or bl
4: esp or ah
5: ebp or ch
6: esi or dh
7: edi or bh

== ModR/M byte ==

mAB

0.B:            [B]       (if B != esp, ebp)
1.B i8:         [B + i8]  (if B != esp)
2.B i32:        [B + i32] (if B != esp)
3.B:            B
0.5 i32         [i32]
0.4 sB5 i32     [i32]
0.4 sBC         [2^s * B + C]   (if C != ebp)
1.4 sBC i8      [2^s * B + C + i8]
2.4 sBC i32     [2^s * B + C + i32]

== Arithmetic instructions ==

0X0 mAB         X.8 mB, A
0X1 mAB         X   mB, A
0X2 mAB         X.8 A, mB
0X3 mAB         X   A, mB
0X4 i8          X.8 al, i8
0X5 i32         X eax, i32
200 mXB i8      X mB, i8
201 mXB i32     X mB, i32
203 mXB i8      X.32 mB, sign-extend(i8)

where:
X=0: add
X=1: or
X=2: adc
X=3: sbb
X=4: and
X=5: sub
X=6: xor
X=7: cmp

301 m4B i8      shl mB, i8
321 m4B         shl mB, 1
323 m4B         shl mB, cl

301 m7B i8      sar mB, i8 (signed shift right)
321 m7B         sar mB, 1
323 m7B         sar mB, cl

301 m5B i8      shr mB, i8 (unsigned shift right)
321 m5B         shr mB, 1
323 m5B         shr mB, cl

205 mAB         test mB, A
251 i32         test eax, i32 (logical and)
367 m0B i32     test mB, i32

10A             inc A
11A             dec A
12A             push A
13A             pop A
150 i32         push i32

== moves ==

210 mAB         movb mB, A
211 mAB         mov mB, A
212 mAB         movbb A, mB
213 mAB         mov A, mB
27A i32         mov A, i32
307 m0B i32     mov mB, i32

== Other ==

017 061         rdtsc

215 mAB         lea A, mAB

220             nop

303             ret
302 i16         ret i16

315 i8          int i8
350 i32         call i32 (relative)
377 m2B         call mB
351 i32         jmp i32 (relative)
353 i8          jmp i8 (relative)

367 m2B         not mB
367 m4B         mul mB (edx:eax <- eax * mB)
367 m5B         imul mB (signed)
367 m6B         div mB (edx:eax / mB -> eax (quotient), edx (remainder))
367 m7B         idiv mB (signed)

377 m4B         jmp mB

== conditionals

$7X i8          jmp_if <X> i8
017 $8X i32     jmp_if <X> i32
017 $9X mAB     set_if.8 <X> rB

cond X:
  0: o, overflow
  1: no, not overflow
  2: c, unsigned < or carry
  3: nc, unsigned >=
  4: z: zero/equal
  5: nz: nonzero/not equal
  6: be, unsigned <=
  7: a, unsigned >
  8: s, sign
  9: ns, not sign
  a: p, parity
  b: np, not parity
  c: l, signed <
  d: ge, signed >=
  e: le, signed <=
  f: g, signed >

===
